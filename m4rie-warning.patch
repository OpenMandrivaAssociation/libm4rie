--- ./m4rie/mzd_poly.h.orig	2014-10-16 11:36:25.000000000 -0600
+++ ./m4rie/mzd_poly.h	2015-10-16 09:48:47.266061097 -0600
@@ -153,8 +153,8 @@ static inline mzd_poly_t *_mzd_poly_addm
   if (C == NULL)
     C = mzd_poly_init(A->depth+B->depth-1, A->nrows, B->ncols);
 
-  for(unsigned int i=0; i<A->depth; i++) {
-    for(unsigned int j=0; j<B->depth; j++) {
+  for(int i=0; i<A->depth; i++) {
+    for(int j=0; j<B->depth; j++) {
       mzd_addmul(C->x[i+j], A->x[i], B->x[j], 0);
     }
   }
--- ./m4rie/mzd_slice.h.orig	2014-10-16 11:36:25.000000000 -0600
+++ ./m4rie/mzd_slice.h	2015-10-16 09:48:47.284059657 -0600
@@ -83,7 +83,7 @@ static inline mzd_slice_t *mzd_slice_ini
   A->ncols = n;
   A->depth = ff->degree;
 
-  for(int i=0; i<A->depth; i++)
+  for(unsigned int i=0; i<A->depth; i++)
     A->x[i] = mzd_init(m,n);
   return A;
 }
@@ -143,7 +143,7 @@ static inline mzd_slice_t *_mzd_slice_ad
  */
 
 static inline void mzd_slice_free(mzd_slice_t *A) {
-  for(int i=0; i<A->depth; i++)
+  for(unsigned int i=0; i<A->depth; i++)
    mzd_free(A->x[i]);
 #if __M4RI_USE_MM_MALLOC
   _mm_free(A);
@@ -398,7 +398,7 @@ static inline mzd_slice_t *mzd_slice_con
   if(C == NULL)
     C = mzd_slice_init(A->finite_field, A->nrows, A->ncols + B->ncols);
 
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_concat(C->x[i], A->x[i], B->x[i]);
   }
   return C;
@@ -425,7 +425,7 @@ static inline mzd_slice_t *mzd_slice_sta
   if(C == NULL)
     C = mzd_slice_init(A->finite_field, A->nrows + B->nrows, A->ncols);
 
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_stack(C->x[i], A->x[i], B->x[i]);
   }
   return C;
@@ -449,7 +449,7 @@ static inline mzd_slice_t *mzd_slice_sub
   if(S==NULL)
     S = mzd_slice_init(A->finite_field, highr - lowr, highc - lowc);
 
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_submatrix(S->x[i], A->x[i], lowr, lowc, highr, highc);
   }
   return S;
@@ -485,7 +485,7 @@ static inline mzd_slice_t *mzd_slice_ini
   B->depth = A->depth;
   B->nrows = highr - lowr;
   B->ncols = highc - lowc;
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     B->x[i] = mzd_init_window(A->x[i], lowr, lowc, highr, highc);
   }
   return B;
@@ -500,7 +500,7 @@ static inline mzd_slice_t *mzd_slice_ini
  */
 
 static inline void mzd_slice_free_window(mzd_slice_t *A) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_free_window(A->x[i]);
   }
   m4ri_mm_free(A);
@@ -846,7 +846,7 @@ static inline mzd_slice_t *mzd_slice_add
  */
 
 static inline void mzd_slice_randomize(mzd_slice_t *A) {
-  for(int i=0; i<A->depth; i++)
+  for(unsigned int i=0; i<A->depth; i++)
     mzd_randomize(A->x[i]);
 }
 
--- ./m4rie/permutation.h.orig	2014-10-16 11:36:25.000000000 -0600
+++ ./m4rie/permutation.h	2015-10-16 09:48:47.285059577 -0600
@@ -103,7 +103,7 @@ static inline void mzed_apply_p_right_tr
  */
 
 static inline void mzd_slice_apply_p_left(mzd_slice_t *A, mzp_t const *P) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_apply_p_left(A->x[i], P);
   }
 }
@@ -118,7 +118,7 @@ static inline void mzd_slice_apply_p_lef
  */
 
 static inline void mzd_slice_apply_p_left_trans(mzd_slice_t *A, mzp_t const *P) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_apply_p_left_trans(A->x[i], P);
   }
 }
@@ -133,7 +133,7 @@ static inline void mzd_slice_apply_p_lef
  */
 
 static inline void mzd_slice_apply_p_right(mzd_slice_t *A, mzp_t const *P) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_apply_p_right(A->x[i], P);
   }
 }
@@ -148,7 +148,7 @@ static inline void mzd_slice_apply_p_rig
  */
 
 static inline void mzd_slice_apply_p_right_trans(mzd_slice_t *A, mzp_t const *P) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_apply_p_right_trans(A->x[i], P);
   }
 }
@@ -165,7 +165,7 @@ static inline void mzd_slice_apply_p_rig
  */
 
 static inline void mzd_slice_apply_p_right_trans_tri(mzd_slice_t *A, mzp_t const *P) {
-  for(int i=0; i<A->depth; i++) {
+  for(unsigned int i=0; i<A->depth; i++) {
     mzd_apply_p_right_trans_tri(A->x[i], P);
   }
 }
--- ./tests/testing.h.orig	2014-11-02 05:21:47.000000000 -0700
+++ ./tests/testing.h	2016-02-04 19:53:34.492536082 -0700
@@ -2,7 +2,7 @@
 #include <m4rie/m4rie.h>
 
 #define m4rie_check(expr)						\
-  if (!expr) {								\
+  if (!(expr)) {							\
     fail_ret += 1;                                                      \
     printf("\n%s in %s:%d failed\n", #expr, __FILE__, __LINE__);  \
   } 
--- ./tests/test_smallops.c.orig	2014-11-02 05:20:30.000000000 -0700
+++ ./tests/test_smallops.c	2015-10-16 09:48:51.397730538 -0600
@@ -75,11 +75,11 @@ int test_slice_known_answers(gf2e *ff, i
   mzd_t *one = mzd_init(m,n);
   mzd_set_ui(one, 1);
 
-  for(int j=0; j<ff->degree; j++) {
+  for(unsigned int j=0; j<ff->degree; j++) {
     mzed_set_ui(A, 1<<j);
     mzd_slice_t *a = mzed_slice(NULL, A);
 
-    for(int i=0; i<a->depth; i++) {
+    for(unsigned int i=0; i<a->depth; i++) {
       if (i!=j) {
         m4rie_check( mzd_is_zero(a->x[i]) );
       } else {
